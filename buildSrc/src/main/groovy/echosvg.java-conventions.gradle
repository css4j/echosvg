plugins {
	id 'java-library'
	/*
	 * Use 'gradle build publishToMavenLocal' to install in local Maven repo
	 */
	id 'maven-publish'
}

repositories {
	maven {
		url = uri('https://repo.maven.apache.org/maven2/')
	}
	maven {
		url "https://css4j.github.io/maven/"
		mavenContent {
			releasesOnly()
		}
		content {
			includeGroup "com.github.css4j"
			includeGroup "io.sf.carte"
			includeGroup "io.sf.jclf"
		}
	}
}

group = 'io.sf.carte'
version = '0.2.1'

sourceSets.main.resources {
	srcDirs += ["$rootDir/shared-resources"]
}

java {
	withSourcesJar()
	sourceCompatibility = JavaVersion.VERSION_11
	targetCompatibility = JavaVersion.VERSION_11
}

tasks.register('jvmVersionAttribute') {
	description = "Set the correct 'org.gradle.jvm.version' attribute"
	if (!project.getPluginManager().hasPlugin('eclipse')) {
		def jvmVersionAttribute = Attribute.of('org.gradle.jvm.version', Integer)
		configurations.each {
			if (it.canBeConsumed) {
				def categoryAttr = it.attributes.getAttribute(Category.CATEGORY_ATTRIBUTE)
				if (categoryAttr != null && categoryAttr.name == Category.LIBRARY) {
					def usageAttr = it.attributes.getAttribute(Usage.USAGE_ATTRIBUTE)
					if (usageAttr != null && (usageAttr.name == Usage.JAVA_API
							|| usageAttr.name == Usage.JAVA_RUNTIME)) {
						it.attributes.attribute(jvmVersionAttribute, 8)
					}
				}
			}
		}
	}
}

tasks.register('compileLegacyJava', JavaCompile) {
	description = 'Compile to Java 8 bytecode, except module-info'
	sourceCompatibility = JavaVersion.VERSION_1_8
	targetCompatibility = JavaVersion.VERSION_1_8
	source = sourceSets.main.java
	dependsOn configurations.compileClasspath
	classpath = sourceSets.main.compileClasspath
	destinationDirectory = sourceSets.main.java.destinationDirectory
	modularity.inferModulePath = false
	excludes = ['module-info.java']
}

compileJava {
	includes = ['module-info.java']
	dependsOn compileLegacyJava
	classpath = sourceSets.main.compileClasspath
}

// Check bytecode version, in case some other task screws it
tasks.register('checkLegacyJava') {
	description = 'Check that classes are Java 8 bytecode (except module-info)'
	enabled = enabled && !project.getPluginManager().hasPlugin('eclipse')
	def classdir = sourceSets.main.output.classesDirs.files.stream().findAny().get()
	def classfiles = fileTree(classdir).matching({it.exclude('module-info.class')}).files
	doFirst() {
		if (!classfiles.isEmpty()) {
			def classfile = classfiles.stream().findAny().get()
			if (classfile != null) {
				def classbytes = classfile.bytes
				def bcversion = classbytes[6] * 128 + classbytes[7]
				if (bcversion != 52) {
					throw new GradleException("Bytecode on " + classfile +
						" is not valid Java 8. Version should be 52, instead is " + bcversion)
				}
			}
		}
	}
}

classes.dependsOn jvmVersionAttribute
classes.finalizedBy checkLegacyJava
jar.dependsOn checkLegacyJava

// Copy jar files to 'jar' directory
tasks.register('copyJars', Copy) {
	description = 'Copy jar files to \'jar\' directory'
	dependsOn tasks.build
	dependsOn ':echosvg-all:jar'
	include '**/*.jar'
	excludes = ['IWasLoaded*.jar', 'JarCheckPermissions*.jar', 'echosvg-*-jmh.jar']
	from layout.buildDirectory.dir("libs")
	into "${rootDir}/jar"
}

tasks.withType(JavaCompile) {
	options.encoding = 'UTF-8'
}

tasks.withType(Javadoc) {
	options.addStringOption('Xdoclint:none', '-quiet')
	options.addStringOption('encoding', 'UTF-8')
	options.addStringOption('charset', 'UTF-8')
	options.links 'https://docs.oracle.com/en/java/javase/11/docs/api/'
}

// Reproducible build
tasks.withType(AbstractArchiveTask).configureEach {
	preserveFileTimestamps = false
	reproducibleFileOrder = true
}

publishing {
	publications {
		maven(MavenPublication) {
			from(components.java)
			pom {
				url = "https://github.com/css4j/echosvg/"
				licenses {
					license {
						name = "The Apache License, Version 2.0"
						url = "http://www.apache.org/licenses/LICENSE-2.0.txt"
					}
				}
			}
		}
	}
	repositories {
		maven {
			name = 'mavenRepo'
			/*
			 * The following section applies to the 'publish' task:
			 *
			 * If you plan to deploy to a repository, please configure the
			 * 'mavenReleaseRepoUrl' and/or 'mavenSnapshotRepoUrl' properties
			 * (for example in GRADLE_USER_HOME/gradle.properties).
			 *
			 * Otherwise, Gradle shall create a 'build/repository' subdirectory
			 * at ${rootDir} and deploy there.
			 *
			 * Properties 'mavenRepoUsername' and 'mavenRepoPassword' can also
			 * be set (generally from command line).
			 */
			def releasesUrl
			def snapshotsUrl
			if (project.hasProperty('mavenReleaseRepoUrl') && project.mavenReleaseRepoUrl) {
				releasesUrl = mavenReleaseRepoUrl
			} else {
				releasesUrl = "${buildDir}/repository/releases"
			}
			if (project.hasProperty('mavenSnapshotRepoUrl') && project.mavenSnapshotRepoUrl) {
				snapshotsUrl = mavenSnapshotRepoUrl
			} else {
				snapshotsUrl = "${buildDir}/repository/snapshots"
			}
			url = version.endsWith('-SNAPSHOT') ? snapshotsUrl : releasesUrl
			if (project.hasProperty('mavenRepoUsername') &&
					project.hasProperty('mavenRepoPassword')) {
				credentials.username = mavenRepoUsername
				credentials.password = mavenRepoPassword
			}
		}
	}
}

tasks.withType(PublishToMavenRepository) { task ->
	doFirst {
		if (repository == publishing.repositories.getByName('mavenRepo')) {
			logger.lifecycle "Deploying artifacts to \"${it.repository.url}\""
		}
	}
}
