plugins {
	id 'echosvg.java-conventions'
}

dependencies {
	implementation project(':echosvg-bridge')
	compileOnly "xml-apis:xml-apis:$xmlApisVersion" // Required by Java 8 compat
}

description = 'io.sf.carte:echosvg-test-scripts'

publishing.publications.maven(MavenPublication).pom {
	description = 'EchoSVG Test non-js Scripts'
}

java {
	sourceCompatibility = JavaVersion.VERSION_1_8
	targetCompatibility = JavaVersion.VERSION_1_8
}

compileLegacyJava.dependsOn ':echosvg-bridge:checkLegacyJava'

compileJava.enabled = false
checkLegacyJava.enabled = false

jar.enabled = false
sourcesJar.enabled = false

task iWasLoadedJar(type: Jar) {
	archiveFileName = 'IWasLoaded.jar'
	dependsOn configurations.compileClasspath
	doFirst {
		from sourceSets.main.output
	}
	manifest {
		attributes (
			'Script-Handler' : 'io.sf.carte.echosvg.bridge.test.load.IWasLoaded'
		)
	}
	with jar
	include 'io/sf/carte/echosvg/bridge/test/load/IWasLoaded.class'
	duplicatesStrategy = 'exclude'
}

task iWasLoadedTooJar(type: Jar) {
	archiveFileName = 'IWasLoadedToo.jar'
	dependsOn configurations.compileClasspath
	doFirst {
		from sourceSets.main.output
	}
	manifest {
		attributes (
			'Script-Handler' : 'io.sf.carte.echosvg.bridge.test.load.IWasLoadedToo'
		)
	}
	with jar
	include 'io/sf/carte/echosvg/bridge/test/load/IWasLoadedToo.class'
	duplicatesStrategy = 'exclude'
}

task jarCheckPermissionsDeniedJar(type: Jar) {
	archiveFileName = 'JarCheckPermissionsDenied.jar'
	dependsOn configurations.compileClasspath
	doFirst {
		from sourceSets.main.output
	}
	manifest {
		attributes (
			'Script-Handler' : 'io.sf.carte.echosvg.bridge.test.load.JarCheckPermissionsDenied'
		)
	}
	with jar
	include 'io/sf/carte/echosvg/bridge/test/load/JarCheckPermissionsDenied*'
	duplicatesStrategy = 'exclude'
}

task jarCheckPermissionsGrantedJar(type: Jar) {
	archiveFileName = 'JarCheckPermissionsGranted.jar'
	dependsOn configurations.compileClasspath
	doFirst {
		from sourceSets.main.output
	}
	manifest {
		attributes (
			'Script-Handler' : 'io.sf.carte.echosvg.bridge.test.load.JarCheckPermissionsGranted'
		)
	}
	with jar
	include 'io/sf/carte/echosvg/bridge/test/load/JarCheckPermissionsGranted*'
	duplicatesStrategy = 'exclude'
}

task jarPolicyTestJar(type: Jar) {
	archiveFileName = 'JarPolicyTest.jar'
	dependsOn lineEndingConvCopy
	from ("$rootDir/test-resources/io/sf/carte/echosvg/transcoder/image/test/text-red.css") {
		into 'css'
	}
	duplicatesStrategy = 'exclude'
}

// Copy script jar files to destination directory
tasks.register('copyScriptJars', Copy) {
	dependsOn iWasLoadedJar, iWasLoadedTooJar, jarCheckPermissionsDeniedJar, jarCheckPermissionsGrantedJar
	include '**/JarCheckPermissions*.jar'
	include '**/IWasLoaded*.jar'
	from layout.buildDirectory.file('libs/IWasLoaded.jar')
	from layout.buildDirectory.file('libs/IWasLoadedToo.jar')
	from layout.buildDirectory.file('libs/JarCheckPermissionsDenied.jar')
	from layout.buildDirectory.file('libs/JarCheckPermissionsGranted.jar')
	into "${rootDir}/test-resources/io/sf/carte/echosvg/bridge/test"
}

// Copy policy test jar to destination directory
tasks.register('copyPolicyJar', Copy) {
	dependsOn tasks.jarPolicyTestJar
	from layout.buildDirectory.file('libs/JarPolicyTest.jar')
	into "${rootDir}/test-resources/io/sf/carte/echosvg/css/test"
}

check.dependsOn iWasLoadedJar
check.dependsOn iWasLoadedTooJar
check.dependsOn jarCheckPermissionsDeniedJar
check.dependsOn jarCheckPermissionsGrantedJar
check.dependsOn copyScriptJars, copyPolicyJar

/*
 * Maven repository deployments (disabled)
 */
tasks.withType(AbstractPublishToMaven).configureEach {
	it.enabled = false
}
