plugins {
	id 'org.ajoberstar.grgit'
	id 'jacoco-report-aggregation'
	id 'echosvg.java-conventions'
}

description = 'io.sf.carte:echosvg-all'

dependencies {
	api project(':echosvg-script')
	api project(':echosvg-ext')
	api project(':echosvg-ext-swing')
	api project(':echosvg-extension')
	api project(':echosvg-gui-util')
	api project(':echosvg-swing')
	api project(':echosvg-slideshow')
	api project(':echosvg-svgpp')
	api project(':echosvg-transcoder')
	api project(':echosvg-transcoder-api')
	api project(':echosvg-transcoder-svg')
	api project(':echosvg-transcoder-svg2svg')
	api project(':echosvg-transcoder-tosvg')
	api project(':echosvg-ttf2svg')
	api project(':echosvg-svgrasterizer')

	// JaCoCo
	jacocoAggregation project(':echosvg-anim')
	jacocoAggregation project(':echosvg-awt-util')
	jacocoAggregation project(':echosvg-bridge')
	jacocoAggregation project(':echosvg-codec')
	jacocoAggregation project(':echosvg-constants')
	jacocoAggregation project(':echosvg-css')
	jacocoAggregation project(':echosvg-dom')
	jacocoAggregation project(':echosvg-ext')
	jacocoAggregation project(':echosvg-ext-swing')
	jacocoAggregation project(':echosvg-extension')
	jacocoAggregation project(':echosvg-gui-util')
	jacocoAggregation project(':echosvg-gvt')
	jacocoAggregation project(':echosvg-i18n')
	jacocoAggregation project(':echosvg-parser')
	jacocoAggregation project(':echosvg-script')
	jacocoAggregation project(':echosvg-slideshow')
	jacocoAggregation project(':echosvg-svg-dom')
	jacocoAggregation project(':echosvg-svggen')
	jacocoAggregation project(':echosvg-svgpp')
	jacocoAggregation project(':echosvg-svgrasterizer')
	jacocoAggregation project(':echosvg-swing')
	jacocoAggregation project(':echosvg-test')
	jacocoAggregation project(':echosvg-transcoder')
	jacocoAggregation project(':echosvg-transcoder-api')
	jacocoAggregation project(':echosvg-transcoder-svg')
	jacocoAggregation project(':echosvg-transcoder-svg2svg')
	jacocoAggregation project(':echosvg-transcoder-tosvg')
	jacocoAggregation project(':echosvg-ttf2svg')
	jacocoAggregation project(':echosvg-util')
	jacocoAggregation project(':echosvg-xml')
}

publishing.publications.maven(MavenPublication).pom {
	description = "EchoSVG aggregate artifact"
}

compileLegacyJava.enabled = false
checkLegacyJava.enabled = false

// Produce a Javadoc of all packages
tasks.register('mergedJavadoc', Javadoc) {
	description = 'Produces a merged Javadoc of all packages'
	destinationDir = file("$buildDir/docs/javadoc")
	title = "$rootProject.name $version API"
	dependsOn configurations.compileClasspath
	dependsOn configurations.runtimeClasspath
	includes += '**/*.java'
	excludes += '**/module-info.java'
	parent.subprojects.each { proj ->
		source += proj.layout.projectDir.dir('src/main/java')
		proj.tasks.withType(Javadoc).each { task ->
			excludes += task.excludes
			includes += task.includes
		}
	}
	classpath = configurations.compileClasspath
	classpath += configurations.runtimeClasspath
}

tasks.register('removeModularSources', Delete) {
	doFirst {
		delete "$buildDir/repos"
		delete "$buildDir/src"
	}
}

// Clone all the repositories
tasks.register('cloneRepos') {
	dependsOn removeModularSources

	doFirst {
		def gitWebAPIs = grgit.clone(dir: "$buildDir/repos/web-apis",
			uri: 'https://github.com/css4j/web-apis.git',
			refToCheckout: "v${svgomVersion}")
		gitWebAPIs?.close()

		def gitCSSAPIs = grgit.clone(dir: "$buildDir/repos/cssom-apis",
			uri: 'https://github.com/css4j/cssom-apis.git',
			refToCheckout: "v0.1")
		gitCSSAPIs?.close()
	}
}

// Prepare modular sources for multi-module javadoc
tasks.register('prepareModularSources') {
	description = 'Copy source files to \'build/src\' directory'
	dependsOn cloneRepos

	doFirst {
		ant.copy(todir: "$buildDir/src/io.sf.carte.echosvg.anim") {
			fileset(dir: "$rootDir/echosvg-anim/src/main/java") {
				include(name: '**/*')
			}
		}
		ant.copy(todir: "$buildDir/src/io.sf.carte.echosvg.awt") {
			fileset(dir: "$rootDir/echosvg-awt-util/src/main/java") {
				include(name: '**/*')
			}
		}
		ant.copy(todir: "$buildDir/src/io.sf.carte.echosvg.bridge") {
			fileset(dir: "$rootDir/echosvg-bridge/src/main/java") {
				include(name: '**/*')
			}
		}
		ant.copy(todir: "$buildDir/src/io.sf.carte.echosvg.constants") {
			fileset(dir: "$rootDir/echosvg-constants/src/main/java") {
				include(name: '**/*')
			}
		}
		ant.copy(todir: "$buildDir/src/io.sf.carte.echosvg.css") {
			fileset(dir: "$rootDir/echosvg-css/src/main/java") {
				include(name: '**/*')
			}
		}
		ant.copy(todir: "$buildDir/src/io.sf.carte.echosvg.dom") {
			fileset(dir: "$rootDir/echosvg-dom/src/main/java") {
				include(name: '**/*')
			}
		}
		ant.copy(todir: "$buildDir/src/io.sf.carte.echosvg.dom.svg") {
			fileset(dir: "$rootDir/echosvg-svg-dom/src/main/java") {
				include(name: '**/*')
			}
		}
		ant.copy(todir: "$buildDir/src/io.sf.carte.echosvg.ext.swing") {
			fileset(dir: "$rootDir/echosvg-ext-swing/src/main/java") {
				include(name: '**/*')
			}
		}
		ant.copy(todir: "$buildDir/src/io.sf.carte.echosvg.external") {
			fileset(dir: "$rootDir/echosvg-ext/src/main/java") {
				include(name: '**/*')
			}
		}
		ant.copy(todir: "$buildDir/src/io.sf.carte.echosvg.extension") {
			fileset(dir: "$rootDir/echosvg-extension/src/main/java") {
				include(name: '**/*')
			}
		}
		ant.copy(todir: "$buildDir/src/io.sf.carte.echosvg.util.gui") {
			fileset(dir: "$rootDir/echosvg-gui-util/src/main/java") {
				include(name: '**/*')
			}
		}
		ant.copy(todir: "$buildDir/src/io.sf.carte.echosvg.gvt") {
			fileset(dir: "$rootDir/echosvg-gvt/src/main/java") {
				include(name: '**/*')
			}
		}
		ant.copy(todir: "$buildDir/src/io.sf.carte.echosvg.i18n") {
			fileset(dir: "$rootDir/echosvg-i18n/src/main/java") {
				include(name: '**/*')
			}
		}
		ant.copy(todir: "$buildDir/src/io.sf.carte.echosvg.parser") {
			fileset(dir: "$rootDir/echosvg-parser/src/main/java") {
				include(name: '**/*')
			}
		}
		ant.copy(todir: "$buildDir/src/io.sf.carte.echosvg.script") {
			fileset(dir: "$rootDir/echosvg-script/src/main/java") {
				include(name: '**/*')
			}
		}
		ant.copy(todir: "$buildDir/src/io.sf.carte.echosvg.apps.slideshow") {
			fileset(dir: "$rootDir/echosvg-slideshow/src/main/java") {
				include(name: '**/*')
			}
		}
		ant.copy(todir: "$buildDir/src/io.sf.carte.echosvg.svggen") {
			fileset(dir: "$rootDir/echosvg-svggen/src/main/java") {
				include(name: '**/*')
			}
		}
		ant.copy(todir: "$buildDir/src/io.sf.carte.echosvg.svgpp") {
			fileset(dir: "$rootDir/echosvg-svgpp/src/main/java") {
				include(name: '**/*')
			}
		}
		ant.copy(todir: "$buildDir/src/io.sf.carte.echosvg.svgrasterizer") {
			fileset(dir: "$rootDir/echosvg-svgrasterizer/src/main/java") {
				include(name: '**/*')
			}
		}
		ant.copy(todir: "$buildDir/src/io.sf.carte.echosvg.swing") {
			fileset(dir: "$rootDir/echosvg-swing/src/main/java") {
				include(name: '**/*')
			}
		}
		ant.copy(todir: "$buildDir/src/io.sf.carte.echosvg.transcoder") {
			fileset(dir: "$rootDir/echosvg-transcoder/src/main/java") {
				include(name: '**/*')
			}
		}
		ant.copy(todir: "$buildDir/src/io.sf.carte.echosvg.transcoder.api") {
			fileset(dir: "$rootDir/echosvg-transcoder-api/src/main/java") {
				include(name: '**/*')
			}
		}
		ant.copy(todir: "$buildDir/src/io.sf.carte.echosvg.transcoder.svg") {
			fileset(dir: "$rootDir/echosvg-transcoder-svg/src/main/java") {
				include(name: '**/*')
			}
		}
		ant.copy(todir: "$buildDir/src/io.sf.carte.echosvg.transcoder.svg2svg") {
			fileset(dir: "$rootDir/echosvg-transcoder-svg2svg/src/main/java") {
				include(name: '**/*')
			}
		}
		ant.copy(todir: "$buildDir/src/io.sf.carte.echosvg.transcoder.tosvg") {
			fileset(dir: "$rootDir/echosvg-transcoder-tosvg/src/main/java") {
				include(name: '**/*')
			}
		}
		ant.copy(todir: "$buildDir/src/io.sf.carte.echosvg.ttf2svg") {
			fileset(dir: "$rootDir/echosvg-ttf2svg/src/main/java") {
				include(name: '**/*')
			}
		}
		ant.copy(todir: "$buildDir/src/io.sf.carte.echosvg.util") {
			fileset(dir: "$rootDir/echosvg-util/src/main/java") {
				include(name: '**/*')
			}
		}
		ant.copy(todir: "$buildDir/src/io.sf.carte.echosvg.xml") {
			fileset(dir: "$rootDir/echosvg-xml/src/main/java") {
				include(name: '**/*')
			}
		}

		// Web APIs
		ant.copy(todir: "$buildDir/src/org.w3c.dom.smil") {
			fileset(dir: "$buildDir/repos/web-apis/smil-api/src/main/java") {
				include(name: '**/*')
			}
		}
		ant.copy(todir: "$buildDir/src/org.w3c.dom.svg") {
			fileset(dir: "$buildDir/repos/web-apis/svgom-api/src/main/java") {
				include(name: '**/*')
			}
		}

		// CSSOM and DOM View APIs
		ant.copy(todir: "$buildDir/src/org.w3c.css.om") {
			fileset(dir: "$buildDir/repos/cssom-apis/cssom-api/src/main/java") {
				include(name: '**/*')
			}
		}
		ant.copy(todir: "$buildDir/src/org.w3c.dom.view") {
			fileset(dir: "$buildDir/repos/cssom-apis/domview-api/src/main/java") {
				include(name: '**/*')
			}
		}
	}
}

// Create a modular Javadoc with all modules
tasks.register('modularJavadoc', Javadoc) {
	description = 'Create a modular Javadoc with all modules'
	dependsOn configurations.compileClasspath
	dependsOn prepareModularSources

	destinationDir = file("$buildDir/docs/modular")
	title = "$rootProject.name $version API"
	source = [ "$buildDir/src/io.sf.carte.echosvg.anim",
		"$buildDir/src/io.sf.carte.echosvg.apps.slideshow",
		"$buildDir/src/io.sf.carte.echosvg.awt",
		"$buildDir/src/io.sf.carte.echosvg.bridge",
		"$buildDir/src/io.sf.carte.echosvg.constants",
		"$buildDir/src/io.sf.carte.echosvg.css",
		"$buildDir/src/io.sf.carte.echosvg.dom",
		"$buildDir/src/io.sf.carte.echosvg.dom.svg",
		"$buildDir/src/io.sf.carte.echosvg.ext.swing",
		"$buildDir/src/io.sf.carte.echosvg.external",
		"$buildDir/src/io.sf.carte.echosvg.extension",
		"$buildDir/src/io.sf.carte.echosvg.gvt",
		"$buildDir/src/io.sf.carte.echosvg.i18n",
		"$buildDir/src/io.sf.carte.echosvg.parser",
		"$buildDir/src/io.sf.carte.echosvg.script",
		"$buildDir/src/io.sf.carte.echosvg.svggen",
		"$buildDir/src/io.sf.carte.echosvg.svgpp",
		"$buildDir/src/io.sf.carte.echosvg.svgrasterizer",
		"$buildDir/src/io.sf.carte.echosvg.swing",
		"$buildDir/src/io.sf.carte.echosvg.transcoder",
		"$buildDir/src/io.sf.carte.echosvg.ttf2svg",
		"$buildDir/src/io.sf.carte.echosvg.util",
		"$buildDir/src/io.sf.carte.echosvg.util.gui",
		"$buildDir/src/io.sf.carte.echosvg.xml",
		"$buildDir/src/org.w3c.css.om",
		"$buildDir/src/org.w3c.dom.view",
		"$buildDir/src/org.w3c.dom.smil",
		"$buildDir/src/org.w3c.dom.svg" ]
	includes += '**/*.java'
	classpath = configurations.compileClasspath
	classpath += configurations.runtimeClasspath
	options.addStringOption('-module-source-path', "$buildDir/src")
}

//create a single Jar with all dependencies
tasks.register('uberjar', Jar) {
	description = 'Create a single Uber Jar with all of EchoSVG modules and dependencies.'

	group = 'Fat jar'

	archiveClassifier = "alldeps"

	dependsOn configurations.compileClasspath
	dependsOn configurations.runtimeClasspath

	doFirst {
		from sourceSets.main.output
		from {
			configurations.compileClasspath.collect { it.isDirectory() ? it : zipTree(it) }
		}
		from {
			configurations.runtimeClasspath.findAll { it.name.endsWith('jar') }.collect { zipTree(it) }
		}
	}

	with jar

	duplicatesStrategy = 'exclude'

	// Exclusions
	// ----------
	exclude 'overview.html'
	// Provided by Java SE
	exclude 'javax/**'
	// Not used by EchoSVG
	exclude 'org/w3c/css/sac/**'
	// The next ones are provided by java.xml module
	exclude 'org/w3c/dom/*'
	exclude 'org/w3c/dom/bootstrap/**'
	exclude 'org/w3c/dom/events/**'
	exclude 'org/w3c/dom/ls/**'
	exclude 'org/w3c/dom/ranges/**'
	exclude 'org/w3c/dom/traversal/**'
	exclude 'org/w3c/dom/views/**'
	exclude 'org/xml/**'
	// Provided by jdk.xml.dom module
	exclude 'org/w3c/dom/css/**'
	exclude 'org/w3c/dom/html/**'
	exclude 'org/w3c/dom/stylesheets/**'
	exclude 'org/w3c/dom/xpath/**'
	// Modularity does not apply here
	exclude 'module-info.class'

	manifest {
		attributes('Main-Class': 'io.sf.carte.echosvg.apps.rasterizer.Main')
	}
}

tasks.named('echosvg-all-jar-with-deps') {
	manifest {
		attributes('Main-Class': 'io.sf.carte.echosvg.apps.rasterizer.Main')
	}
}
