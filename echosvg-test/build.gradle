plugins {
	id 'echosvg.java-conventions'
}

sourceSets {
	// Tests
	test {
		resources.srcDirs = ["$rootDir/test-resources"]
	}
	// Interactive tests
	itest {
		java.srcDirs = ['src/itest/java']
		resources.srcDirs = ["$rootDir/test-resources"]
		compileClasspath += sourceSets.test.output
		runtimeClasspath += sourceSets.test.output
	}
	// JMH benchmarks
	jmh {
		java.srcDirs = ['src/jmh/java']
		resources.srcDirs = ['src/jmh/resources']
		compileClasspath += sourceSets.main.runtimeClasspath
	}
}

configurations {
	itestImplementation.extendsFrom testImplementation
	itestRuntimeOnly.extendsFrom testRuntimeOnly
}

dependencies {
	testImplementation project(':echosvg-i18n')
	testImplementation project(':echosvg-test-swing')
	testImplementation project(':echosvg-extension')
	testImplementation project(':echosvg-svgrasterizer')
	testImplementation "junit:junit:${junitVersion}"
	testImplementation "org.mozilla:rhino:${rhinoVersion}"
	testImplementation "nu.validator:htmlparser:${htmlParserVersion}"
	if (!project.getPluginManager().hasPlugin('eclipse')) {
		testImplementation ("xml-apis:xml-apis:$xmlApisVersion")
	}
	jmhImplementation "org.openjdk.jmh:jmh-core:${jmhVersion}"
	jmhAnnotationProcessor "org.openjdk.jmh:jmh-generator-annprocess:${jmhVersion}"
	jmhImplementation project(':echosvg-anim')
	jmhImplementation project(':echosvg-svggen')
	jmhImplementation "xml-apis:xml-apis:$xmlApisVersion"
}

if (project.getPluginManager().hasPlugin('eclipse')) {
	configurations.all*.exclude group: 'xml-apis', module: 'xml-apis'
}

description = 'io.sf.carte:echosvg-test'

publishing.publications.maven(MavenPublication).pom {
	description = "EchoSVG Test Suite"
}

test {
	exclude 'io/sf/carte/echosvg/apps/rasterizer/MainTest.class'
	exclude 'io/sf/carte/echosvg/bridge/*LoadTest.class'
	exclude 'io/sf/carte/echosvg/bridge/*PermissionsTest.class'
	exclude 'io/sf/carte/echosvg/script/rhino/RhinoTest.class'

	// Exclude tests via gradlew test -PexcludeTests="SamplesRenderingTest.testVerticalText,..."
	if (project.hasProperty('excludeTests')) {
		filter {
			project.properties['excludeTests']?.replaceAll('\s', '')?.split(',').each {
				excludeTestsMatching "*.${it}"
			}
		}
	}
}

compileTestJava {
	// Rhino scripting may not work correctly if JDK is modular
	sourceCompatibility = JavaVersion.VERSION_1_8
	targetCompatibility = JavaVersion.VERSION_1_8
	dependsOn ':echosvg-all:classes'
}

// We have no 'main' set here, so disable main compilations
compileLegacyJava.enabled = false
compileJava.enabled = false
checkLegacyJava.enabled = false

// Some tests do not work when the classes are in a testJar
// And the main jar is empty
jar.enabled = false
sourcesJar.enabled = false

/*
 * Interactive tests runner
 */
tasks.register('iTest', Test) {
	description = 'Run interactive tests'
	group = 'verification'

	testClassesDirs = sourceSets.itest.output.classesDirs
	classpath = sourceSets.itest.runtimeClasspath
	dependsOn configurations.itestCompileClasspath
}

/*
 * JMH benchmarks
 */
classes.finalizedBy(jmhClasses)

// XXX: find a way to remove the following block
compileJmhJava {
	dependsOn ':echosvg-bridge:classes'
	dependsOn ':echosvg-svggen:classes'
}

//create a single Jar with all benchmark dependencies
tasks.register('jmhJar', Jar) {
	description = 'Create a single benchmark Jar with dependencies'
	archiveBaseName = 'echosvg'
	archiveClassifier = 'jmh'
	manifest {
		attributes(
			'Main-Class' : 'org.openjdk.jmh.Main'
		)
	}
	dependsOn configurations.jmhCompileClasspath
	dependsOn configurations.jmhRuntimeClasspath
	doFirst {
		from sourceSets.jmh.output
		from {
			configurations.jmhCompileClasspath.collect { it.isDirectory() ? it : zipTree(it) }
		}
		from {
			configurations.jmhRuntimeClasspath.findAll { it.name.endsWith('jar') }.collect { zipTree(it) }
		}
	}
	with jar
	duplicatesStrategy = 'exclude'
	exclude 'module-info.class'
	exclude 'javax/**'
	exclude 'org/w3c/css/**'
}

build.dependsOn jmhJar

// Execute JMH benchmarks
task runJmh(type: JavaExec) {
	description = 'Run JMH benchmarks'
	dependsOn jmhClasses
	classpath = sourceSets.jmh.runtimeClasspath
	mainClass = 'org.openjdk.jmh.Main'

	def regexp = project.properties.get('jmh.regexp', 'Mark');
	def format = project.properties.get('jmh.rf', 'json');
	def resultFilename = project.properties.get('jmh.rff', "jmh-result.${format}");
	def resultFile = file("${buildDir}/reports/jmh/${resultFilename}")

	doFirst {
		resultFile.parentFile.mkdirs()
	}

	args regexp
	args '-rf', format
	args '-rff', resultFile
	jvmArgs '-Dfile.encoding=UTF-8'
}

/*
 * Maven repository deployments (disabled)
 */
// Disable Maven publication (shipped security policies are not
// adequate for running tests from a jar)
tasks.withType(PublishToMavenRepository).configureEach {
	it.enabled = false
}
