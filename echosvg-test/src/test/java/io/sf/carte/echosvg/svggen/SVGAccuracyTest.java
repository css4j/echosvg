/*

   See the NOTICE file distributed with this work for additional
   information regarding copyright ownership.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

 */
package io.sf.carte.echosvg.svggen;

import static org.junit.jupiter.api.Assertions.fail;

import java.awt.Dimension;
import java.awt.Font;
import java.awt.FontFormatException;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.net.URL;

import org.w3c.dom.DOMImplementation;
import org.w3c.dom.Document;

import io.sf.carte.echosvg.dom.GenericDOMImplementation;
import io.sf.carte.echosvg.svggen.SVGGeneratorContext.GraphicContextDefaults;
import io.sf.carte.echosvg.test.TestFonts;
import io.sf.carte.echosvg.test.TestUtil;
import io.sf.carte.echosvg.util.SVGConstants;

/**
 * This test validates that a given rendering sequence, modeled by a
 * <code>Painter</code> is properly converted to an SVG document by comparing
 * the generated SVG document to a known, valid SVG reference.
 *
 * @author <a href="mailto:vhardy@apache.org">Vincent Hardy</a>
 * @author For later modifications, see Git history.
 * @version $Id$
 */
public class SVGAccuracyTest {

	/**
	 * Canvas size for all tests
	 */
	public static final Dimension CANVAS_SIZE = new Dimension(300, 400);

	/**
	 * Painter which performs an arbitrary rendering sequence.
	 */
	private Painter painter;

	/**
	 * Reference SVG URL
	 */
	private URL refURL;

	/**
	 * File where the generated SVG might be saved
	 */
	private File saveSVG;

	/**
	 * Constructor
	 * 
	 * @param painter the <code>Painter</code> object which will perform an
	 *                arbitrary rendering sequence.
	 * @param refURL  the location of a reference SVG which should be exactly
	 *                identical to that generated by the painter.
	 */
	public SVGAccuracyTest(Painter painter, URL refURL) {
		this.painter = painter;
		this.refURL = refURL;
	}

	void setSaveSVG(File saveSVG) {
		this.saveSVG = saveSVG;
	}

	/**
	 * This method will only throw exceptions if some aspect of the test's internal
	 * operation fails.
	 * 
	 * @param expectError false if no error expected
	 * @throws FontFormatException 
	 */
	void runTest(boolean expectError) throws IOException, FontFormatException {

		SVGGraphics2D g2d = buildSVGGraphics2D();
		g2d.setSVGCanvasSize(CANVAS_SIZE);

		//
		// Generate SVG content
		//
		ByteArrayOutputStream bos = new ByteArrayOutputStream(2048);
		OutputStreamWriter osw = new OutputStreamWriter(bos, "UTF-8");
		painter.paint(g2d);
		configureSVGGraphics2D(g2d);
		g2d.stream(osw);
		osw.flush();
		bos.flush();
		bos.close();

		//
		// Compare with reference SVG
		//
		byte[] data = bos.toByteArray();

		String failMessage = TestUtil.xmlDiff(refURL, data, null);

		if (failMessage != null) {
			save(bos.toByteArray());
			if (!expectError) {
				fail("File: " + refURL.toExternalForm() + '\n' +  failMessage);
			}
		} else if (expectError) {
			fail("Expected accuracy error but found no error, on file: " + refURL.toExternalForm());
		}

	}

	/**
	 * Saves the byte array in the "saveSVG" file.
	 */
	private void save(byte[] data) throws IOException {
		if (saveSVG == null) {
			return;
		}

		File parentDir = saveSVG.getParentFile();
		if (!parentDir.exists()) {
			if (!parentDir.mkdir()) {
				return;
			}
		}

		FileOutputStream os = new FileOutputStream(saveSVG);
		os.write(data);
		os.close();
	}

	/**
	 * Builds an <code>SVGGraphics2D</code> with a default configuration.
	 * @throws FontFormatException 
	 */
	protected SVGGraphics2D buildSVGGraphics2D() throws IOException, FontFormatException {
		DOMImplementation impl = GenericDOMImplementation.getDOMImplementation();
		String namespaceURI = SVGConstants.SVG_NAMESPACE_URI;
		Document domFactory = impl.createDocument(namespaceURI, SVGConstants.SVG_SVG_TAG, null);

		SVGGeneratorContext ctx = SVGGeneratorContext.createDefault(domFactory);

		GraphicContextDefaults defaults = new GraphicContextDefaults();
		defaults.setFont(new Font(TestFonts.FONT_FAMILY_SANS1, Font.PLAIN, 12));
		ctx.setGraphicContextDefaults(defaults);
		ctx.setPrecision(12);

		return new SVGGraphics2D(ctx, false);
	}

	/**
	 * Eventually configure the <code>SVGGraphics2D</code> after dumping in it and
	 * just before serializing the DOM Tree.
	 */
	protected void configureSVGGraphics2D(SVGGraphics2D g2d) {
	}

}
