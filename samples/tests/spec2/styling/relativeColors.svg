<?xml version="1.0" standalone="no"?>
<!--

   See the NOTICE file distributed with this work for additional
   information regarding copyright ownership.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

-->
<!-- ====================================================================== -->
<!-- Illustrates SVG with CSS conditional rules and custom properties.      -->
<!--                                                                        -->
<!-- @author github.com/carlosame                                           -->
<!-- @version $Id$    -->
<!-- ====================================================================== -->

<?xml-stylesheet type="text/css" title="Gray" href="../../resources/style/gray.css" alternate="yes" ?>

<svg xmlns="http://www.w3.org/2000/svg" width="400" height="500" viewBox="0 0 400 500">

  <style type="text/css">
/*<![CDATA[*/

@property --fillColorBlue {
  syntax: "<color>";
  inherits: true;
  initial-value: #0000ff;
}

@property --pty-not-set {
  syntax: "<color>";
  inherits: true;
  initial-value: #cf8650;
}

g {
    --fillColorBlue: #0000fd; /* blue */
    --fillColorRed: #ff0000; /* red */
    --fillColorGreen: #00ff00; /* lime */
    --fillColorYellow: #ffff00; /* yellow */
    --strokeColorBlue: #000044; /* dark blue */
    --strokeColorRed: #440000; /* dark red */
    --strokeColorYellow: #868400; /* dark yellow */
    --strokeColorGreen: #027a00; /* dark green */
    --fillColorBlueAlpha: #0000ff4c; /* blue with transparency */
    --fillColorRedAlpha: #ff00004c; /* red with transparency */
    --fillColorGreenAlpha: #00ff004c; /* green with transparency */
    --fillColorYellowAlpha: #ffff004c; /* yellow with transparency */
    --textColor: #175a9e;
    --onePixel: 1px;
    --circle-stroke-width: calc(3*2px);
    --ellipse-stroke-width: calc(2*var(--onePixel));
    --textFontSize: calc(2 * 5pt);

    --linear-gb: 0.001399396 0.06030292;
    --s-gb: 29.80392% 47.8431373%;
    --s-rg: 13.33333% 24.70588%;

    font: bold var(--textFontSize) "Open Sans", sans-serif;
}

circle {
  stroke-width: 5px;
}

ellipse {
  stroke-width: 3px;
}

@supports (color: lch(67% 45 240)) {
  g {
    --fillColorBlue: #0100fd; /* blue */
    --fillColorRed: #d52c30; /* red */
    --fillColorGreen: #33fe1d; /* green */
    --fillColorYellow: color(srgb 0.980392 0.980392 0.0705882); /* yellow */
    --strokeColorBlue: #007eae; /* dark blue */
    --strokeColorRed: #7f000c; /* dark red */
    --fillColorBlueAlpha: lch(65.20983% 46.141591 244.80216 / 0.3); /* blue with transparency */
    --fillColorRedAlpha: lch(47.896% 73.221 26.589 / 0.22); /* red with transparency */
    --fillColorGreenAlpha: hwb(104.12 2.65194% 0.6641% / 0.3); /* green with transparency */
    --fillColorYellowAlpha: lch(96% 92 99.6/.3); /* yellow with transparency */
    --textColor: lch(37.1% 43.5 269);
    --circle-stroke-width: calc(1px + 5px);
    --ellipse-stroke-width: calc(1px + var(--onePixel));
  }
}

@media screen and (100px <= width <= 3000px) {
  circle {
    stroke-width: var(--circle-stroke-width);
  }
  ellipse {
    stroke-width: var(--ellipse-stroke-width);
  }
}

@media print {
  text.itemdesc {
    font-family: "Ubuntu Mono";
    font-size: calc(var(--textFontSize) + 2pt);
  }
}

@media screen and (prefers-color-scheme: light) {
  #txtcl4 {
    fill: color(srgb-linear 0.130013 var(--linear-gb));
  }

  #txtcp {
    fill: rgb(24.705882% var(--s-gb));
  }

  #txtcr {
    fill: rgb(var(--s-rg) 36.07843%);
  }
}

@supports (not selector(div col.foo||td)) {
  text.itemdesc {
    fill: var(--textColor);
  }
}

/*]]>*/
  </style>

  <g>
  <circle cx="250" cy="300" r="20" style="fill:rgb(from var(--fillColorBlue) r g b); stroke:rgb(from var(--strokeColorBlue) r g b)"/>
  <circle cx="150" cy="150" r="20" style="fill:rgb(from var(--fillColorRed) r g b); stroke:rgb(from var(--strokeColorRed) r g b)"/>
  <circle cx="280" cy="150" r="20" style="fill:rgb(from var(--fillColorYellow) r g b/ alpha); stroke:rgb(from var(--strokeColorYellow) r g b)"/>
  <circle cx="120" cy="300" r="20" style="fill:rgb(from var(--fillColorGreen) r g b/ alpha); stroke:rgb(from var(--strokeColorGreen) r g b)"/>
  <ellipse cx="250" cy="300" rx="100" ry="130" transform="rotate(-20 250 300)"
style="fill:rgb(from var(--fillColorBlueAlpha) r calc(g + 6) b / alpha); stroke:rgb(from var(--fillColorBlue) r g b / alpha)"/>
  <ellipse cx="150" cy="150" rx="100" ry="130" transform="rotate(-20 150 150)"
style="fill:oklch(from var(--fillColorRedAlpha) l c calc(h + 5) / alpha); stroke:rgb(from var(--fillColorRed) r g b / alpha)"/>
  <ellipse cx="280" cy="150" rx="100" ry="130" transform="rotate(30 280 150)"
style="fill:color(from var(--fillColorYellowAlpha) srgb r g b / alpha); stroke:rgb(from var(--fillColorYellow) r g b/ alpha)"/>
  <ellipse cx="120" cy="300" rx="100" ry="130" transform="rotate(30 120 300)"
style="fill:lch(from var(--fillColorGreenAlpha) l c calc(h + 2)/ alpha); stroke:rgb(from var(--fillColorGreen) r g b / alpha)"/>
  <text x="80" y="50" class="itemdesc" text-anchor="middle">Media Queries</text>
  <text x="320" y="50" class="itemdesc" text-anchor="middle" id="txtcr">Conditional rules</text>
  <text x="91" y="400" class="itemdesc" text-anchor="middle" id="txtcl4">Color Level 4 / calc()</text>
  <text x="300" y="400" class="itemdesc" text-anchor="middle" id="txtcp">Custom Properties (*)</text>
  <text x="190" y="455" class="itemdesc" text-anchor="middle"
style="fill:var(--pty-not-set);">* and registered custom properties</text>
  </g>

</svg>
